package ${package.Controller};


import ${package.ModuleName}.common.result.Result
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${swagger})
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
#end
import ${package.Entity}.${entity};
import ${package.Service}.${table.serviceName};
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * @Author ${author}
 * @Date ${date}
 * @Description
 * @Copyright(c) ${year} , 青枫网络工作室
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${swagger})
@Api(tags = "${table.controllerName}")
#end
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass}
#else
public class ${table.controllerName}
#end
{
@Autowired
private ${table.serviceName} ${table.entityPath}Service;

@Log("查询所有${table.entityPath}")
@ApiOperation(value = "查询所有")
@GetMapping("/select")
public Result findAll() {
    return Result.createSuccessMessage(${table.entityPath}Service.list());
}

@Log("根据ID查询${table.entityPath}")
@ApiOperation(value = "根据ID查询")
    #foreach($field in ${table.fields})
        #if(${field.keyIdentityFlag})
        @ApiImplicitParam(name = "${field.propertyName}", value = "${field.comment}", required = true, dataType = "${field.propertyType}", dataTypeClass = ${field.propertyType}.class)
        #end
    #end
@GetMapping("/{id}")
public Result findById(@PathVariable #foreach($field in ${table.fields})#if(${field.keyIdentityFlag})${field.propertyType}#end#end id) {
    return Result.createSuccessMessage(${table.entityPath}Service.getById(id));
}


@Log("添加${table.entityPath}")
@ApiOperation(value = "添加")
@ApiImplicitParams({
    #foreach($field in ${table.fields})
            @ApiImplicitParam(name = "${field.propertyName}", value = "${field.comment}", required = true, dataType = "${field.propertyType}", dataTypeClass = ${field.propertyType}.class),
    #end
})
@PostMapping("/insert")
public Result insert(@RequestBody ${entity} ${table.entityPath}) {
    return brezeJudgeResult(${table.entityPath}Service.save(${table.entityPath}),"操作成功","操作失败");
}

@Log("修改${table.entityPath}")
@ApiOperation(value = "修改")
@ApiImplicitParams({
    #foreach($field in ${table.fields})
            @ApiImplicitParam(name = "${field.propertyName}", value = "${field.comment}", required = true, dataType = "${field.propertyType}", dataTypeClass = ${field.propertyType}.class),
    #end
})
@PutMapping("/update")
public Result updateById(@RequestBody ${entity} ${table.entityPath}) {
    boolean flag = ${table.entityPath}Service.updateById(${table.entityPath});
    return flag ? Result.createSuccessMessage(${table.entityPath}) : Result.createFailureMessage(ErrorEnum.FindException);
}

@Log("根据ID删除${table.entityPath}")
@ApiOperation(value = "根据ID删除")
    #foreach($field in ${table.fields})
        #if(${field.keyIdentityFlag})
        @ApiImplicitParam(name = "${field.propertyName}", value = "${field.comment}", required = true, dataType = "${field.propertyType}", dataTypeClass = ${field.propertyType}.class)
        #end
    #end
@DeleteMapping("/delete/{id}")
public Result deleteById(@PathVariable #foreach($field in ${table.fields})#if(${field.keyIdentityFlag})${field.propertyType}#end#end id) {
    boolean flag = ${table.entityPath}Service.removeById(id);
    if (flag) {
        return Result.createSuccessMessage("删除成功");
    }
    return Result.createFailureMessage(ErrorEnum.UnknowError);
}
}

